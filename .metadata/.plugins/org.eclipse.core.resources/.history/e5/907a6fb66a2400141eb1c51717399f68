/*
 * man.cc
 *
 *  Created on: 18 Mar 2014
 *      Author: melda
 */

#include <QGraphicsWidget>
#include <QtGui>
#include <QtWidgets>
#include "MainWindow.h"
#include "GLWidget.h"

#include "../TissueFolding/SourceCode/Simulation.h"
#include <vector>

class MainWindow;
class SurfaceBase;
class GLWidget;

Simulation* Sim01;
int main(int argc, char **argv)
{
	bool Success = false;
	Sim01 = new Simulation();
	if (argc<2){
		Sim01->DisplaySave = false;
		cerr<<"Using default settings"<<endl;
		Success = true;
	}
	else{
		Success = Sim01->readExecutableInputs(argc, argv);
	}
	if (Success == 0 ){
		cout<<"Error in input to executable"<<endl;
		return true;
	}

	QApplication app(argc, argv);

	if (Sim01->DisplaySave){
		cout<<"Initiating simulation display"<<endl;
		Success = Sim01->initiateSavedSystem();
	}
	else{
		Success = Sim01->initiateSystem();
		cout<<"system initiated"<<endl;
		//rotate system in 90 degrees around z axis:
		double RotMat[3][3] = {{0,-1,0},{1,0,0},{0,0,1}}
		for (int i=0; i<Sim01->Nodes.size(); ++i){
				double x = 0, y=0,z=0;
				for (int k=0; k<3; ++k){
					x +=  RotMat[0][k]*Sim01->Nodes[i]->Position[k];
					y +=  RotMat[1][k]*Sim01->Nodes[i]->Position[k];
					z +=  RotMat[2][k]*Sim01->Nodes[i]->Position[k];
				}
				Sim01->Nodes[i]->Position[0] = x;
				Sim01->Nodes[i]->Position[1] = y;
				Sim01->Nodes[i]->Position[2] = z;
		}
		//for (int i=5; i<9; ++i){
		//	Sim01->Nodes[i]->Position[2] -= 4.0;
		//}
		//for (int i=13; i<16; ++i){
		//			Sim01->Nodes[i]->Position[2] -= 4.0;
		//		}
		for (int i=0; i<Sim01->Elements.size(); ++i){
			Sim01->Elements[i]->updatePositions(Sim01->Nodes);
		}
	}

	if (Success == 0 ){
		cout<<"System is not initiated successfully, terminating"<<endl;
		return true;
	}

	MainWindow mw(Sim01);
	mw.show();
	mw.MainGLWidget->show();
	mw.raise();
	mw.setGeometry(100, 100, 1200, 900);
	mw.MainScene->update();

	return app.exec();
}




